/*
Container Tracking API

This documentation defines how the users can utilize the Portcast API to retrieve the latest Track and Trace Data for any container, bill of lading or booking across 100+ carriers and 2500+ ports across the globe.  What's changed in the version 2.0? Find out more about it [here](https://support.portcast.io/support/solutions/articles/151000074289-api-release-notes-april-2023-)!!

API version: 2.0
Contact: support@portcast.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
	"time"
)

// checks if the DelayReasons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelayReasons{}

// DelayReasons Schema for delay reasons associated to the bookmark; Refer to [Delay Reasons Detail Docs](docs/Delay_Reasons_and_Incidents.md) for more details
type DelayReasons struct {
	// Container Delay Reason Object Created Date
	Created *time.Time `json:"created,omitempty"`
	// Description of the Delay Reason
	DelayDescription *string `json:"delay_description,omitempty"`
	// Location qualifier to define if the delay incident has taken place at the origin port (POL) or transshipment port (POT)
	LocationTypeCode *string `json:"location_type_code,omitempty"`
	// Relates to the UNLOCODE for the location to which the delay incident is associated with
	PortCode *string `json:"port_code,omitempty"`
	// Relates to the location name to which the delay incident is associated with
	PortName *string `json:"port_name,omitempty"`
	// Delay Incident Code: RLV(Vessel Rollover), LTD(Late Departure), PRC(Port Rotation Changes)
	ReasonCode     *string                     `json:"reason_code,omitempty"`
	RotationChange *DelayReasonsRotationChange `json:"rotation_change,omitempty"`
	// Detailed view into impact of delay incidents into the container's arrival at POD, loading and departure events.
	ScheduleChange []DelayReasonsScheduleChangeInner `json:"schedule_change,omitempty"`
	VesselChange   *DelayReasonsVesselChange         `json:"vessel_change,omitempty"`
}

// NewDelayReasons instantiates a new DelayReasons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelayReasons() *DelayReasons {
	this := DelayReasons{}
	return &this
}

// NewDelayReasonsWithDefaults instantiates a new DelayReasons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelayReasonsWithDefaults() *DelayReasons {
	this := DelayReasons{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DelayReasons) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DelayReasons) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DelayReasons) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDelayDescription returns the DelayDescription field value if set, zero value otherwise.
func (o *DelayReasons) GetDelayDescription() string {
	if o == nil || IsNil(o.DelayDescription) {
		var ret string
		return ret
	}
	return *o.DelayDescription
}

// GetDelayDescriptionOk returns a tuple with the DelayDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetDelayDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DelayDescription) {
		return nil, false
	}
	return o.DelayDescription, true
}

// HasDelayDescription returns a boolean if a field has been set.
func (o *DelayReasons) HasDelayDescription() bool {
	if o != nil && !IsNil(o.DelayDescription) {
		return true
	}

	return false
}

// SetDelayDescription gets a reference to the given string and assigns it to the DelayDescription field.
func (o *DelayReasons) SetDelayDescription(v string) {
	o.DelayDescription = &v
}

// GetLocationTypeCode returns the LocationTypeCode field value if set, zero value otherwise.
func (o *DelayReasons) GetLocationTypeCode() string {
	if o == nil || IsNil(o.LocationTypeCode) {
		var ret string
		return ret
	}
	return *o.LocationTypeCode
}

// GetLocationTypeCodeOk returns a tuple with the LocationTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetLocationTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LocationTypeCode) {
		return nil, false
	}
	return o.LocationTypeCode, true
}

// HasLocationTypeCode returns a boolean if a field has been set.
func (o *DelayReasons) HasLocationTypeCode() bool {
	if o != nil && !IsNil(o.LocationTypeCode) {
		return true
	}

	return false
}

// SetLocationTypeCode gets a reference to the given string and assigns it to the LocationTypeCode field.
func (o *DelayReasons) SetLocationTypeCode(v string) {
	o.LocationTypeCode = &v
}

// GetPortCode returns the PortCode field value if set, zero value otherwise.
func (o *DelayReasons) GetPortCode() string {
	if o == nil || IsNil(o.PortCode) {
		var ret string
		return ret
	}
	return *o.PortCode
}

// GetPortCodeOk returns a tuple with the PortCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetPortCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PortCode) {
		return nil, false
	}
	return o.PortCode, true
}

// HasPortCode returns a boolean if a field has been set.
func (o *DelayReasons) HasPortCode() bool {
	if o != nil && !IsNil(o.PortCode) {
		return true
	}

	return false
}

// SetPortCode gets a reference to the given string and assigns it to the PortCode field.
func (o *DelayReasons) SetPortCode(v string) {
	o.PortCode = &v
}

// GetPortName returns the PortName field value if set, zero value otherwise.
func (o *DelayReasons) GetPortName() string {
	if o == nil || IsNil(o.PortName) {
		var ret string
		return ret
	}
	return *o.PortName
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetPortNameOk() (*string, bool) {
	if o == nil || IsNil(o.PortName) {
		return nil, false
	}
	return o.PortName, true
}

// HasPortName returns a boolean if a field has been set.
func (o *DelayReasons) HasPortName() bool {
	if o != nil && !IsNil(o.PortName) {
		return true
	}

	return false
}

// SetPortName gets a reference to the given string and assigns it to the PortName field.
func (o *DelayReasons) SetPortName(v string) {
	o.PortName = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *DelayReasons) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *DelayReasons) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *DelayReasons) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetRotationChange returns the RotationChange field value if set, zero value otherwise.
func (o *DelayReasons) GetRotationChange() DelayReasonsRotationChange {
	if o == nil || IsNil(o.RotationChange) {
		var ret DelayReasonsRotationChange
		return ret
	}
	return *o.RotationChange
}

// GetRotationChangeOk returns a tuple with the RotationChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetRotationChangeOk() (*DelayReasonsRotationChange, bool) {
	if o == nil || IsNil(o.RotationChange) {
		return nil, false
	}
	return o.RotationChange, true
}

// HasRotationChange returns a boolean if a field has been set.
func (o *DelayReasons) HasRotationChange() bool {
	if o != nil && !IsNil(o.RotationChange) {
		return true
	}

	return false
}

// SetRotationChange gets a reference to the given DelayReasonsRotationChange and assigns it to the RotationChange field.
func (o *DelayReasons) SetRotationChange(v DelayReasonsRotationChange) {
	o.RotationChange = &v
}

// GetScheduleChange returns the ScheduleChange field value if set, zero value otherwise.
func (o *DelayReasons) GetScheduleChange() []DelayReasonsScheduleChangeInner {
	if o == nil || IsNil(o.ScheduleChange) {
		var ret []DelayReasonsScheduleChangeInner
		return ret
	}
	return o.ScheduleChange
}

// GetScheduleChangeOk returns a tuple with the ScheduleChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetScheduleChangeOk() ([]DelayReasonsScheduleChangeInner, bool) {
	if o == nil || IsNil(o.ScheduleChange) {
		return nil, false
	}
	return o.ScheduleChange, true
}

// HasScheduleChange returns a boolean if a field has been set.
func (o *DelayReasons) HasScheduleChange() bool {
	if o != nil && !IsNil(o.ScheduleChange) {
		return true
	}

	return false
}

// SetScheduleChange gets a reference to the given []DelayReasonsScheduleChangeInner and assigns it to the ScheduleChange field.
func (o *DelayReasons) SetScheduleChange(v []DelayReasonsScheduleChangeInner) {
	o.ScheduleChange = v
}

// GetVesselChange returns the VesselChange field value if set, zero value otherwise.
func (o *DelayReasons) GetVesselChange() DelayReasonsVesselChange {
	if o == nil || IsNil(o.VesselChange) {
		var ret DelayReasonsVesselChange
		return ret
	}
	return *o.VesselChange
}

// GetVesselChangeOk returns a tuple with the VesselChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelayReasons) GetVesselChangeOk() (*DelayReasonsVesselChange, bool) {
	if o == nil || IsNil(o.VesselChange) {
		return nil, false
	}
	return o.VesselChange, true
}

// HasVesselChange returns a boolean if a field has been set.
func (o *DelayReasons) HasVesselChange() bool {
	if o != nil && !IsNil(o.VesselChange) {
		return true
	}

	return false
}

// SetVesselChange gets a reference to the given DelayReasonsVesselChange and assigns it to the VesselChange field.
func (o *DelayReasons) SetVesselChange(v DelayReasonsVesselChange) {
	o.VesselChange = &v
}

func (o DelayReasons) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelayReasons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.DelayDescription) {
		toSerialize["delay_description"] = o.DelayDescription
	}
	if !IsNil(o.LocationTypeCode) {
		toSerialize["location_type_code"] = o.LocationTypeCode
	}
	if !IsNil(o.PortCode) {
		toSerialize["port_code"] = o.PortCode
	}
	if !IsNil(o.PortName) {
		toSerialize["port_name"] = o.PortName
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reason_code"] = o.ReasonCode
	}
	if !IsNil(o.RotationChange) {
		toSerialize["rotation_change"] = o.RotationChange
	}
	if !IsNil(o.ScheduleChange) {
		toSerialize["schedule_change"] = o.ScheduleChange
	}
	if !IsNil(o.VesselChange) {
		toSerialize["vessel_change"] = o.VesselChange
	}
	return toSerialize, nil
}

type NullableDelayReasons struct {
	value *DelayReasons
	isSet bool
}

func (v NullableDelayReasons) Get() *DelayReasons {
	return v.value
}

func (v *NullableDelayReasons) Set(val *DelayReasons) {
	v.value = val
	v.isSet = true
}

func (v NullableDelayReasons) IsSet() bool {
	return v.isSet
}

func (v *NullableDelayReasons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelayReasons(val *DelayReasons) *NullableDelayReasons {
	return &NullableDelayReasons{value: val, isSet: true}
}

func (v NullableDelayReasons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelayReasons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
