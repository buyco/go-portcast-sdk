/*
Container Tracking API

This documentation defines how the users can utilize the Portcast API to retrieve the latest Track and Trace Data for any container, bill of lading or booking across 100+ carriers and 2500+ ports across the globe.  What's changed in the version 2.0? Find out more about it [here](https://support.portcast.io/support/solutions/articles/151000074289-api-release-notes-april-2023-)!!

API version: 2.0
Contact: support@portcast.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
	"time"
)

// checks if the ContainerEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerEvent{}

// ContainerEvent Schema for Container Events; Refer to [Container Events Detail Docs](docs/Container_Events_Data_Types.md) for more details
type ContainerEvent struct {
	// Container Event Object Created Date
	Created *time.Time `json:"created,omitempty"`
	// Description of the event, as reported by the Carrier
	EventRaw *string `json:"event_raw,omitempty"`
	// The latest actual date-time of the event, as reported by the Carrier - Local Time
	EventTime NullableTime `json:"event_time,omitempty"`
	// The latest estimated date-time of the event, as reported by the Carrier - Local Time
	EventTimeEstimated NullableTime `json:"event_time_estimated,omitempty"`
	// Portcast Standardized Event Code
	EventTypeCode *string `json:"event_type_code,omitempty"`
	// Portcast Standardized Event Name
	EventTypeName *string `json:"event_type_name,omitempty"`
	// Unique Identifier for the Container Event Object
	Id *string `json:"id,omitempty"`
	// Relates to a physical location where the container event takes place, as reported by the Carrier
	LocationRaw NullableString `json:"location_raw,omitempty"`
	// Describes the stage at which the container event takes place - Code
	LocationTypeCode *string `json:"location_type_code,omitempty"`
	// Describes the stage at which the container event takes place - Full Description
	LocationTypeName *string `json:"location_type_name,omitempty"`
	// Mode of Transport which is used for the execution of the container event, as interpretted by Portcast
	ModeOfTransport NullableString `json:"mode_of_transport,omitempty"`
	// Relates to the UNLOCODE for the location where the container event takes place, as standardized by Portcast
	PortCode NullableString `json:"port_code,omitempty"`
	// Relates to the location name where the container event takes place, as standardized by Portcast
	PortName NullableString `json:"port_name,omitempty"`
	TerminalDetails *ContainerEventTerminalDetails `json:"terminal_details,omitempty"`
	// Container Event Object Updated Date
	Updated *time.Time `json:"updated,omitempty"`
	// Vessel IMO of the vessel associated with the event
	VesselImo NullableFloat32 `json:"vessel_imo,omitempty"`
	// Vessel Name of the vessel associated with the event
	VesselName NullableString `json:"vessel_name,omitempty"`
}

// NewContainerEvent instantiates a new ContainerEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerEvent() *ContainerEvent {
	this := ContainerEvent{}
	return &this
}

// NewContainerEventWithDefaults instantiates a new ContainerEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerEventWithDefaults() *ContainerEvent {
	this := ContainerEvent{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ContainerEvent) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ContainerEvent) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *ContainerEvent) SetCreated(v time.Time) {
	o.Created = &v
}

// GetEventRaw returns the EventRaw field value if set, zero value otherwise.
func (o *ContainerEvent) GetEventRaw() string {
	if o == nil || IsNil(o.EventRaw) {
		var ret string
		return ret
	}
	return *o.EventRaw
}

// GetEventRawOk returns a tuple with the EventRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetEventRawOk() (*string, bool) {
	if o == nil || IsNil(o.EventRaw) {
		return nil, false
	}
	return o.EventRaw, true
}

// HasEventRaw returns a boolean if a field has been set.
func (o *ContainerEvent) HasEventRaw() bool {
	if o != nil && !IsNil(o.EventRaw) {
		return true
	}

	return false
}

// SetEventRaw gets a reference to the given string and assigns it to the EventRaw field.
func (o *ContainerEvent) SetEventRaw(v string) {
	o.EventRaw = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetEventTime() time.Time {
	if o == nil || IsNil(o.EventTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EventTime.Get()
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetEventTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTime.Get(), o.EventTime.IsSet()
}

// HasEventTime returns a boolean if a field has been set.
func (o *ContainerEvent) HasEventTime() bool {
	if o != nil && o.EventTime.IsSet() {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given NullableTime and assigns it to the EventTime field.
func (o *ContainerEvent) SetEventTime(v time.Time) {
	o.EventTime.Set(&v)
}
// SetEventTimeNil sets the value for EventTime to be an explicit nil
func (o *ContainerEvent) SetEventTimeNil() {
	o.EventTime.Set(nil)
}

// UnsetEventTime ensures that no value is present for EventTime, not even an explicit nil
func (o *ContainerEvent) UnsetEventTime() {
	o.EventTime.Unset()
}

// GetEventTimeEstimated returns the EventTimeEstimated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetEventTimeEstimated() time.Time {
	if o == nil || IsNil(o.EventTimeEstimated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EventTimeEstimated.Get()
}

// GetEventTimeEstimatedOk returns a tuple with the EventTimeEstimated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetEventTimeEstimatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTimeEstimated.Get(), o.EventTimeEstimated.IsSet()
}

// HasEventTimeEstimated returns a boolean if a field has been set.
func (o *ContainerEvent) HasEventTimeEstimated() bool {
	if o != nil && o.EventTimeEstimated.IsSet() {
		return true
	}

	return false
}

// SetEventTimeEstimated gets a reference to the given NullableTime and assigns it to the EventTimeEstimated field.
func (o *ContainerEvent) SetEventTimeEstimated(v time.Time) {
	o.EventTimeEstimated.Set(&v)
}
// SetEventTimeEstimatedNil sets the value for EventTimeEstimated to be an explicit nil
func (o *ContainerEvent) SetEventTimeEstimatedNil() {
	o.EventTimeEstimated.Set(nil)
}

// UnsetEventTimeEstimated ensures that no value is present for EventTimeEstimated, not even an explicit nil
func (o *ContainerEvent) UnsetEventTimeEstimated() {
	o.EventTimeEstimated.Unset()
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
func (o *ContainerEvent) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *ContainerEvent) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
func (o *ContainerEvent) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

// GetEventTypeName returns the EventTypeName field value if set, zero value otherwise.
func (o *ContainerEvent) GetEventTypeName() string {
	if o == nil || IsNil(o.EventTypeName) {
		var ret string
		return ret
	}
	return *o.EventTypeName
}

// GetEventTypeNameOk returns a tuple with the EventTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetEventTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeName) {
		return nil, false
	}
	return o.EventTypeName, true
}

// HasEventTypeName returns a boolean if a field has been set.
func (o *ContainerEvent) HasEventTypeName() bool {
	if o != nil && !IsNil(o.EventTypeName) {
		return true
	}

	return false
}

// SetEventTypeName gets a reference to the given string and assigns it to the EventTypeName field.
func (o *ContainerEvent) SetEventTypeName(v string) {
	o.EventTypeName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ContainerEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ContainerEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ContainerEvent) SetId(v string) {
	o.Id = &v
}

// GetLocationRaw returns the LocationRaw field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetLocationRaw() string {
	if o == nil || IsNil(o.LocationRaw.Get()) {
		var ret string
		return ret
	}
	return *o.LocationRaw.Get()
}

// GetLocationRawOk returns a tuple with the LocationRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetLocationRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocationRaw.Get(), o.LocationRaw.IsSet()
}

// HasLocationRaw returns a boolean if a field has been set.
func (o *ContainerEvent) HasLocationRaw() bool {
	if o != nil && o.LocationRaw.IsSet() {
		return true
	}

	return false
}

// SetLocationRaw gets a reference to the given NullableString and assigns it to the LocationRaw field.
func (o *ContainerEvent) SetLocationRaw(v string) {
	o.LocationRaw.Set(&v)
}
// SetLocationRawNil sets the value for LocationRaw to be an explicit nil
func (o *ContainerEvent) SetLocationRawNil() {
	o.LocationRaw.Set(nil)
}

// UnsetLocationRaw ensures that no value is present for LocationRaw, not even an explicit nil
func (o *ContainerEvent) UnsetLocationRaw() {
	o.LocationRaw.Unset()
}

// GetLocationTypeCode returns the LocationTypeCode field value if set, zero value otherwise.
func (o *ContainerEvent) GetLocationTypeCode() string {
	if o == nil || IsNil(o.LocationTypeCode) {
		var ret string
		return ret
	}
	return *o.LocationTypeCode
}

// GetLocationTypeCodeOk returns a tuple with the LocationTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetLocationTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LocationTypeCode) {
		return nil, false
	}
	return o.LocationTypeCode, true
}

// HasLocationTypeCode returns a boolean if a field has been set.
func (o *ContainerEvent) HasLocationTypeCode() bool {
	if o != nil && !IsNil(o.LocationTypeCode) {
		return true
	}

	return false
}

// SetLocationTypeCode gets a reference to the given string and assigns it to the LocationTypeCode field.
func (o *ContainerEvent) SetLocationTypeCode(v string) {
	o.LocationTypeCode = &v
}

// GetLocationTypeName returns the LocationTypeName field value if set, zero value otherwise.
func (o *ContainerEvent) GetLocationTypeName() string {
	if o == nil || IsNil(o.LocationTypeName) {
		var ret string
		return ret
	}
	return *o.LocationTypeName
}

// GetLocationTypeNameOk returns a tuple with the LocationTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetLocationTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocationTypeName) {
		return nil, false
	}
	return o.LocationTypeName, true
}

// HasLocationTypeName returns a boolean if a field has been set.
func (o *ContainerEvent) HasLocationTypeName() bool {
	if o != nil && !IsNil(o.LocationTypeName) {
		return true
	}

	return false
}

// SetLocationTypeName gets a reference to the given string and assigns it to the LocationTypeName field.
func (o *ContainerEvent) SetLocationTypeName(v string) {
	o.LocationTypeName = &v
}

// GetModeOfTransport returns the ModeOfTransport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetModeOfTransport() string {
	if o == nil || IsNil(o.ModeOfTransport.Get()) {
		var ret string
		return ret
	}
	return *o.ModeOfTransport.Get()
}

// GetModeOfTransportOk returns a tuple with the ModeOfTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetModeOfTransportOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModeOfTransport.Get(), o.ModeOfTransport.IsSet()
}

// HasModeOfTransport returns a boolean if a field has been set.
func (o *ContainerEvent) HasModeOfTransport() bool {
	if o != nil && o.ModeOfTransport.IsSet() {
		return true
	}

	return false
}

// SetModeOfTransport gets a reference to the given NullableString and assigns it to the ModeOfTransport field.
func (o *ContainerEvent) SetModeOfTransport(v string) {
	o.ModeOfTransport.Set(&v)
}
// SetModeOfTransportNil sets the value for ModeOfTransport to be an explicit nil
func (o *ContainerEvent) SetModeOfTransportNil() {
	o.ModeOfTransport.Set(nil)
}

// UnsetModeOfTransport ensures that no value is present for ModeOfTransport, not even an explicit nil
func (o *ContainerEvent) UnsetModeOfTransport() {
	o.ModeOfTransport.Unset()
}

// GetPortCode returns the PortCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetPortCode() string {
	if o == nil || IsNil(o.PortCode.Get()) {
		var ret string
		return ret
	}
	return *o.PortCode.Get()
}

// GetPortCodeOk returns a tuple with the PortCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetPortCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortCode.Get(), o.PortCode.IsSet()
}

// HasPortCode returns a boolean if a field has been set.
func (o *ContainerEvent) HasPortCode() bool {
	if o != nil && o.PortCode.IsSet() {
		return true
	}

	return false
}

// SetPortCode gets a reference to the given NullableString and assigns it to the PortCode field.
func (o *ContainerEvent) SetPortCode(v string) {
	o.PortCode.Set(&v)
}
// SetPortCodeNil sets the value for PortCode to be an explicit nil
func (o *ContainerEvent) SetPortCodeNil() {
	o.PortCode.Set(nil)
}

// UnsetPortCode ensures that no value is present for PortCode, not even an explicit nil
func (o *ContainerEvent) UnsetPortCode() {
	o.PortCode.Unset()
}

// GetPortName returns the PortName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetPortName() string {
	if o == nil || IsNil(o.PortName.Get()) {
		var ret string
		return ret
	}
	return *o.PortName.Get()
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetPortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortName.Get(), o.PortName.IsSet()
}

// HasPortName returns a boolean if a field has been set.
func (o *ContainerEvent) HasPortName() bool {
	if o != nil && o.PortName.IsSet() {
		return true
	}

	return false
}

// SetPortName gets a reference to the given NullableString and assigns it to the PortName field.
func (o *ContainerEvent) SetPortName(v string) {
	o.PortName.Set(&v)
}
// SetPortNameNil sets the value for PortName to be an explicit nil
func (o *ContainerEvent) SetPortNameNil() {
	o.PortName.Set(nil)
}

// UnsetPortName ensures that no value is present for PortName, not even an explicit nil
func (o *ContainerEvent) UnsetPortName() {
	o.PortName.Unset()
}

// GetTerminalDetails returns the TerminalDetails field value if set, zero value otherwise.
func (o *ContainerEvent) GetTerminalDetails() ContainerEventTerminalDetails {
	if o == nil || IsNil(o.TerminalDetails) {
		var ret ContainerEventTerminalDetails
		return ret
	}
	return *o.TerminalDetails
}

// GetTerminalDetailsOk returns a tuple with the TerminalDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetTerminalDetailsOk() (*ContainerEventTerminalDetails, bool) {
	if o == nil || IsNil(o.TerminalDetails) {
		return nil, false
	}
	return o.TerminalDetails, true
}

// HasTerminalDetails returns a boolean if a field has been set.
func (o *ContainerEvent) HasTerminalDetails() bool {
	if o != nil && !IsNil(o.TerminalDetails) {
		return true
	}

	return false
}

// SetTerminalDetails gets a reference to the given ContainerEventTerminalDetails and assigns it to the TerminalDetails field.
func (o *ContainerEvent) SetTerminalDetails(v ContainerEventTerminalDetails) {
	o.TerminalDetails = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ContainerEvent) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerEvent) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ContainerEvent) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ContainerEvent) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetVesselImo returns the VesselImo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetVesselImo() float32 {
	if o == nil || IsNil(o.VesselImo.Get()) {
		var ret float32
		return ret
	}
	return *o.VesselImo.Get()
}

// GetVesselImoOk returns a tuple with the VesselImo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetVesselImoOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VesselImo.Get(), o.VesselImo.IsSet()
}

// HasVesselImo returns a boolean if a field has been set.
func (o *ContainerEvent) HasVesselImo() bool {
	if o != nil && o.VesselImo.IsSet() {
		return true
	}

	return false
}

// SetVesselImo gets a reference to the given NullableFloat32 and assigns it to the VesselImo field.
func (o *ContainerEvent) SetVesselImo(v float32) {
	o.VesselImo.Set(&v)
}
// SetVesselImoNil sets the value for VesselImo to be an explicit nil
func (o *ContainerEvent) SetVesselImoNil() {
	o.VesselImo.Set(nil)
}

// UnsetVesselImo ensures that no value is present for VesselImo, not even an explicit nil
func (o *ContainerEvent) UnsetVesselImo() {
	o.VesselImo.Unset()
}

// GetVesselName returns the VesselName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerEvent) GetVesselName() string {
	if o == nil || IsNil(o.VesselName.Get()) {
		var ret string
		return ret
	}
	return *o.VesselName.Get()
}

// GetVesselNameOk returns a tuple with the VesselName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerEvent) GetVesselNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VesselName.Get(), o.VesselName.IsSet()
}

// HasVesselName returns a boolean if a field has been set.
func (o *ContainerEvent) HasVesselName() bool {
	if o != nil && o.VesselName.IsSet() {
		return true
	}

	return false
}

// SetVesselName gets a reference to the given NullableString and assigns it to the VesselName field.
func (o *ContainerEvent) SetVesselName(v string) {
	o.VesselName.Set(&v)
}
// SetVesselNameNil sets the value for VesselName to be an explicit nil
func (o *ContainerEvent) SetVesselNameNil() {
	o.VesselName.Set(nil)
}

// UnsetVesselName ensures that no value is present for VesselName, not even an explicit nil
func (o *ContainerEvent) UnsetVesselName() {
	o.VesselName.Unset()
}

func (o ContainerEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.EventRaw) {
		toSerialize["event_raw"] = o.EventRaw
	}
	if o.EventTime.IsSet() {
		toSerialize["event_time"] = o.EventTime.Get()
	}
	if o.EventTimeEstimated.IsSet() {
		toSerialize["event_time_estimated"] = o.EventTimeEstimated.Get()
	}
	if !IsNil(o.EventTypeCode) {
		toSerialize["event_type_code"] = o.EventTypeCode
	}
	if !IsNil(o.EventTypeName) {
		toSerialize["event_type_name"] = o.EventTypeName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.LocationRaw.IsSet() {
		toSerialize["location_raw"] = o.LocationRaw.Get()
	}
	if !IsNil(o.LocationTypeCode) {
		toSerialize["location_type_code"] = o.LocationTypeCode
	}
	if !IsNil(o.LocationTypeName) {
		toSerialize["location_type_name"] = o.LocationTypeName
	}
	if o.ModeOfTransport.IsSet() {
		toSerialize["mode_of_transport"] = o.ModeOfTransport.Get()
	}
	if o.PortCode.IsSet() {
		toSerialize["port_code"] = o.PortCode.Get()
	}
	if o.PortName.IsSet() {
		toSerialize["port_name"] = o.PortName.Get()
	}
	if !IsNil(o.TerminalDetails) {
		toSerialize["terminal_details"] = o.TerminalDetails
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if o.VesselImo.IsSet() {
		toSerialize["vessel_imo"] = o.VesselImo.Get()
	}
	if o.VesselName.IsSet() {
		toSerialize["vessel_name"] = o.VesselName.Get()
	}
	return toSerialize, nil
}

type NullableContainerEvent struct {
	value *ContainerEvent
	isSet bool
}

func (v NullableContainerEvent) Get() *ContainerEvent {
	return v.value
}

func (v *NullableContainerEvent) Set(val *ContainerEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerEvent(val *ContainerEvent) *NullableContainerEvent {
	return &NullableContainerEvent{value: val, isSet: true}
}

func (v NullableContainerEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


