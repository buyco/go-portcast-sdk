/*
Portcast API (1.1.0) - Bill of Lading Tracking

**This documentation is for the latest version of the Portcast Bill of Lading Tracking API.**  There are two variables used in this documentation: 1. `api-url`: the url to use for accessing the API. The official url is `https://api.portcast.io` 2. `x-api-key`: the access token to send along with every request to the API. This key will be provided to each organisation upon API access activation  The general workflow is as below:  1. Create the bill of lading bookmark if it does not exist already (`POST {{api-url}}/api/v1/eta/bill-of-lading-bookmarks`). 2. A bookmark must contain `carrier_no`, `bl_no` and `cntr_no` information. This will return the bill of lading bookmark information created. Record the `id` field from the response. 3. Wait for predictions to be generated. This could take up to 5 mins. 5. Query for the tracking results based on the `id` recorded earlier (`GET {{api-url}}/api/v1/eta/tracking/bill-of-lading-bookmarks/<id>`)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
)

// BookingBookmarkResponseExisted struct for BookingBookmarkResponseExisted
type BookingBookmarkResponseExisted struct {
	Message     *string   `json:"message,omitempty"`
	PreviousIds *[]string `json:"previous_ids,omitempty"`
}

// NewBookingBookmarkResponseExisted instantiates a new BookingBookmarkResponseExisted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookingBookmarkResponseExisted() *BookingBookmarkResponseExisted {
	this := BookingBookmarkResponseExisted{}
	return &this
}

// NewBookingBookmarkResponseExistedWithDefaults instantiates a new BookingBookmarkResponseExisted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookingBookmarkResponseExistedWithDefaults() *BookingBookmarkResponseExisted {
	this := BookingBookmarkResponseExisted{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BookingBookmarkResponseExisted) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookingBookmarkResponseExisted) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BookingBookmarkResponseExisted) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BookingBookmarkResponseExisted) SetMessage(v string) {
	o.Message = &v
}

// GetPreviousIds returns the PreviousIds field value if set, zero value otherwise.
func (o *BookingBookmarkResponseExisted) GetPreviousIds() []string {
	if o == nil || o.PreviousIds == nil {
		var ret []string
		return ret
	}
	return *o.PreviousIds
}

// GetPreviousIdsOk returns a tuple with the PreviousIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookingBookmarkResponseExisted) GetPreviousIdsOk() (*[]string, bool) {
	if o == nil || o.PreviousIds == nil {
		return nil, false
	}
	return o.PreviousIds, true
}

// HasPreviousIds returns a boolean if a field has been set.
func (o *BookingBookmarkResponseExisted) HasPreviousIds() bool {
	if o != nil && o.PreviousIds != nil {
		return true
	}

	return false
}

// SetPreviousIds gets a reference to the given []string and assigns it to the PreviousIds field.
func (o *BookingBookmarkResponseExisted) SetPreviousIds(v []string) {
	o.PreviousIds = &v
}

func (o BookingBookmarkResponseExisted) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.PreviousIds != nil {
		toSerialize["previous_ids"] = o.PreviousIds
	}
	return json.Marshal(toSerialize)
}

type NullableBookingBookmarkResponseExisted struct {
	value *BookingBookmarkResponseExisted
	isSet bool
}

func (v NullableBookingBookmarkResponseExisted) Get() *BookingBookmarkResponseExisted {
	return v.value
}

func (v *NullableBookingBookmarkResponseExisted) Set(val *BookingBookmarkResponseExisted) {
	v.value = val
	v.isSet = true
}

func (v NullableBookingBookmarkResponseExisted) IsSet() bool {
	return v.isSet
}

func (v *NullableBookingBookmarkResponseExisted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookingBookmarkResponseExisted(val *BookingBookmarkResponseExisted) *NullableBookingBookmarkResponseExisted {
	return &NullableBookingBookmarkResponseExisted{value: val, isSet: true}
}

func (v NullableBookingBookmarkResponseExisted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookingBookmarkResponseExisted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
