/*
Portcast API (1.1.0) - Bill of Lading Tracking

**This documentation is for the latest version of the Portcast Bill of Lading Tracking API.**  There are two variables used in this documentation: 1. `api-url`: the url to use for accessing the API. The official url is `https://api.portcast.io` 2. `x-api-key`: the access token to send along with every request to the API. This key will be provided to each organisation upon API access activation  The general workflow is as below:  1. Create the bill of lading bookmark if it does not exist already (`POST {{api-url}}/api/v1/eta/bill-of-lading-bookmarks`). 2. A bookmark must contain `carrier_no`, `bl_no` and `cntr_no` information. This will return the bill of lading bookmark information created. Record the `id` field from the response. 3. Wait for predictions to be generated. This could take up to 5 mins. 5. Query for the tracking results based on the `id` recorded earlier (`GET {{api-url}}/api/v1/eta/tracking/bill-of-lading-bookmarks/<id>`) 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type BillOfLadingBookmarksApi interface {

	/*
	EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDelete Delete a particular bill of lading bookmark by ID

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param billOfLadingBookmarkId
	 @return ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest
	*/
	EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDelete(ctx _context.Context, billOfLadingBookmarkId string) ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest

	// EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteExecute executes the request
	//  @return MessageModel
	EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteExecute(r ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest) (MessageModel, *_nethttp.Response, error)

	/*
	EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGet Get a particular bill of lading bookmark by ID

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param billOfLadingBookmarkId
	 @return ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest
	*/
	EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGet(ctx _context.Context, billOfLadingBookmarkId string) ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest

	// EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetExecute executes the request
	//  @return BookmarkResponse
	EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetExecute(r ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest) (BookmarkResponse, *_nethttp.Response, error)

	/*
	EtaBillOfLadingBookmarksGet Get a list of bookmarked bill of ladings

	This api returns 5 records at a time, please use the value of the `_ended_at` field in the response as the `_start_after` value in a subsequent request to get the next 5 records.

You could filter based the parameters listed.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiEtaBillOfLadingBookmarksGetRequest
	*/
	EtaBillOfLadingBookmarksGet(ctx _context.Context) ApiEtaBillOfLadingBookmarksGetRequest

	// EtaBillOfLadingBookmarksGetExecute executes the request
	//  @return InlineResponse200
	EtaBillOfLadingBookmarksGetExecute(r ApiEtaBillOfLadingBookmarksGetRequest) (InlineResponse200, *_nethttp.Response, error)

	/*
	EtaBillOfLadingBookmarksPost Create a new bill of lading bookmark

	Please send the bill of lading with the following fields:
```
{
    "carrier_no": <string, required, scac code of carrier, will use first 4 characters of bl_no as carrier_no if left empty>,
    "bl_no": <string, required, ocean carrier bill of lading number>,
    "cntr_no": <string, required, the container number you want to track from the bill of lading>
}
```

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiEtaBillOfLadingBookmarksPostRequest
	*/
	EtaBillOfLadingBookmarksPost(ctx _context.Context) ApiEtaBillOfLadingBookmarksPostRequest

	// EtaBillOfLadingBookmarksPostExecute executes the request
	//  @return Bookmark
	EtaBillOfLadingBookmarksPostExecute(r ApiEtaBillOfLadingBookmarksPostRequest) (Bookmark, *_nethttp.Response, error)
}

// BillOfLadingBookmarksApiService BillOfLadingBookmarksApi service
type BillOfLadingBookmarksApiService service

type ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest struct {
	ctx _context.Context
	ApiService BillOfLadingBookmarksApi
	billOfLadingBookmarkId string
}


func (r ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest) Execute() (MessageModel, *_nethttp.Response, error) {
	return r.ApiService.EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteExecute(r)
}

/*
EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDelete Delete a particular bill of lading bookmark by ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billOfLadingBookmarkId
 @return ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest
*/
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDelete(ctx _context.Context, billOfLadingBookmarkId string) ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest {
	return ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		billOfLadingBookmarkId: billOfLadingBookmarkId,
	}
}

// Execute executes the request
//  @return MessageModel
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteExecute(r ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdDeleteRequest) (MessageModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MessageModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillOfLadingBookmarksApiService.EtaBillOfLadingBookmarksBillOfLadingBookmarkIdDelete")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eta/bill-of-lading-bookmarks/{bill_of_lading_bookmark_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bill_of_lading_bookmark_id"+"}", _neturl.PathEscape(parameterToString(r.billOfLadingBookmarkId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-org-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-org-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v AuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest struct {
	ctx _context.Context
	ApiService BillOfLadingBookmarksApi
	billOfLadingBookmarkId string
}


func (r ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest) Execute() (BookmarkResponse, *_nethttp.Response, error) {
	return r.ApiService.EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetExecute(r)
}

/*
EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGet Get a particular bill of lading bookmark by ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billOfLadingBookmarkId
 @return ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest
*/
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGet(ctx _context.Context, billOfLadingBookmarkId string) ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest {
	return ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest{
		ApiService: a,
		ctx: ctx,
		billOfLadingBookmarkId: billOfLadingBookmarkId,
	}
}

// Execute executes the request
//  @return BookmarkResponse
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetExecute(r ApiEtaBillOfLadingBookmarksBillOfLadingBookmarkIdGetRequest) (BookmarkResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BookmarkResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillOfLadingBookmarksApiService.EtaBillOfLadingBookmarksBillOfLadingBookmarkIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eta/bill-of-lading-bookmarks/{bill_of_lading_bookmark_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bill_of_lading_bookmark_id"+"}", _neturl.PathEscape(parameterToString(r.billOfLadingBookmarkId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-org-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-org-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v AuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEtaBillOfLadingBookmarksGetRequest struct {
	ctx _context.Context
	ApiService BillOfLadingBookmarksApi
	startAfter *string
	ascending *string
	carrierNo *string
	blNo *string
	cntrNo *string
	status *string
	statusCode *string
}

// start query from after this voyage bookmark id
func (r ApiEtaBillOfLadingBookmarksGetRequest) StartAfter(startAfter string) ApiEtaBillOfLadingBookmarksGetRequest {
	r.startAfter = &startAfter
	return r
}
// if set to true, sort results based on creation time in ascending order. false by default
func (r ApiEtaBillOfLadingBookmarksGetRequest) Ascending(ascending string) ApiEtaBillOfLadingBookmarksGetRequest {
	r.ascending = &ascending
	return r
}
// filter on the carrier scac
func (r ApiEtaBillOfLadingBookmarksGetRequest) CarrierNo(carrierNo string) ApiEtaBillOfLadingBookmarksGetRequest {
	r.carrierNo = &carrierNo
	return r
}
// filter on the bill of lading number
func (r ApiEtaBillOfLadingBookmarksGetRequest) BlNo(blNo string) ApiEtaBillOfLadingBookmarksGetRequest {
	r.blNo = &blNo
	return r
}
// filter on the container number
func (r ApiEtaBillOfLadingBookmarksGetRequest) CntrNo(cntrNo string) ApiEtaBillOfLadingBookmarksGetRequest {
	r.cntrNo = &cntrNo
	return r
}
// filter on the status
func (r ApiEtaBillOfLadingBookmarksGetRequest) Status(status string) ApiEtaBillOfLadingBookmarksGetRequest {
	r.status = &status
	return r
}
// filter on the status code
func (r ApiEtaBillOfLadingBookmarksGetRequest) StatusCode(statusCode string) ApiEtaBillOfLadingBookmarksGetRequest {
	r.statusCode = &statusCode
	return r
}

func (r ApiEtaBillOfLadingBookmarksGetRequest) Execute() (InlineResponse200, *_nethttp.Response, error) {
	return r.ApiService.EtaBillOfLadingBookmarksGetExecute(r)
}

/*
EtaBillOfLadingBookmarksGet Get a list of bookmarked bill of ladings

This api returns 5 records at a time, please use the value of the `_ended_at` field in the response as the `_start_after` value in a subsequent request to get the next 5 records.

You could filter based the parameters listed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEtaBillOfLadingBookmarksGetRequest
*/
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksGet(ctx _context.Context) ApiEtaBillOfLadingBookmarksGetRequest {
	return ApiEtaBillOfLadingBookmarksGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InlineResponse200
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksGetExecute(r ApiEtaBillOfLadingBookmarksGetRequest) (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillOfLadingBookmarksApiService.EtaBillOfLadingBookmarksGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eta/bill-of-lading-bookmarks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startAfter != nil {
		localVarQueryParams.Add("_start_after", parameterToString(*r.startAfter, ""))
	}
	if r.ascending != nil {
		localVarQueryParams.Add("_ascending", parameterToString(*r.ascending, ""))
	}
	if r.carrierNo != nil {
		localVarQueryParams.Add("carrier_no", parameterToString(*r.carrierNo, ""))
	}
	if r.blNo != nil {
		localVarQueryParams.Add("bl_no", parameterToString(*r.blNo, ""))
	}
	if r.cntrNo != nil {
		localVarQueryParams.Add("cntr_no", parameterToString(*r.cntrNo, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.statusCode != nil {
		localVarQueryParams.Add("status_code", parameterToString(*r.statusCode, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-org-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-org-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v AuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEtaBillOfLadingBookmarksPostRequest struct {
	ctx _context.Context
	ApiService BillOfLadingBookmarksApi
	containerBookmarkRequest *ContainerBookmarkRequest
}

func (r ApiEtaBillOfLadingBookmarksPostRequest) ContainerBookmarkRequest(containerBookmarkRequest ContainerBookmarkRequest) ApiEtaBillOfLadingBookmarksPostRequest {
	r.containerBookmarkRequest = &containerBookmarkRequest
	return r
}

func (r ApiEtaBillOfLadingBookmarksPostRequest) Execute() (Bookmark, *_nethttp.Response, error) {
	return r.ApiService.EtaBillOfLadingBookmarksPostExecute(r)
}

/*
EtaBillOfLadingBookmarksPost Create a new bill of lading bookmark

Please send the bill of lading with the following fields:
```
{
    "carrier_no": <string, required, scac code of carrier, will use first 4 characters of bl_no as carrier_no if left empty>,
    "bl_no": <string, required, ocean carrier bill of lading number>,
    "cntr_no": <string, required, the container number you want to track from the bill of lading>
}
```

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEtaBillOfLadingBookmarksPostRequest
*/
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksPost(ctx _context.Context) ApiEtaBillOfLadingBookmarksPostRequest {
	return ApiEtaBillOfLadingBookmarksPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Bookmark
func (a *BillOfLadingBookmarksApiService) EtaBillOfLadingBookmarksPostExecute(r ApiEtaBillOfLadingBookmarksPostRequest) (Bookmark, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Bookmark
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillOfLadingBookmarksApiService.EtaBillOfLadingBookmarksPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eta/bill-of-lading-bookmarks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.containerBookmarkRequest == nil {
		return localVarReturnValue, nil, reportError("containerBookmarkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.containerBookmarkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-org-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-org-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v AuthError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MessageModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
