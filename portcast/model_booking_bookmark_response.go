/*
Portcast API (1.1.0) - Bill of Lading Tracking

**This documentation is for the latest version of the Portcast Bill of Lading Tracking API.**  There are two variables used in this documentation: 1. `api-url`: the url to use for accessing the API. The official url is `https://api.portcast.io` 2. `x-api-key`: the access token to send along with every request to the API. This key will be provided to each organisation upon API access activation  The general workflow is as below:  1. Create the bill of lading bookmark if it does not exist already (`POST {{api-url}}/api/v1/eta/bill-of-lading-bookmarks`). 2. A bookmark must contain `carrier_no`, `bl_no` and `cntr_no` information. This will return the bill of lading bookmark information created. Record the `id` field from the response. 3. Wait for predictions to be generated. This could take up to 5 mins. 5. Query for the tracking results based on the `id` recorded earlier (`GET {{api-url}}/api/v1/eta/tracking/bill-of-lading-bookmarks/<id>`) 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
	"fmt"
)

// BookingBookmarkResponse struct for BookingBookmarkResponse
type BookingBookmarkResponse struct {
	BookingBookmarkResponseExisted *BookingBookmarkResponseExisted
	BookmarkResponse *BookmarkResponse
	MessageModel *MessageModel
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *BookingBookmarkResponse) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BookingBookmarkResponseExisted
	err = json.Unmarshal(data, &dst.BookingBookmarkResponseExisted);
	if err == nil {
		jsonBookingBookmarkResponseExisted, _ := json.Marshal(dst.BookingBookmarkResponseExisted)
		if string(jsonBookingBookmarkResponseExisted) == "{}" { // empty struct
			dst.BookingBookmarkResponseExisted = nil
		} else {
			return nil // data stored in dst.BookingBookmarkResponseExisted, return on the first match
		}
	} else {
		dst.BookingBookmarkResponseExisted = nil
	}

	// try to unmarshal JSON data into BookmarkResponse
	err = json.Unmarshal(data, &dst.BookmarkResponse);
	if err == nil {
		jsonBookmarkResponse, _ := json.Marshal(dst.BookmarkResponse)
		if string(jsonBookmarkResponse) == "{}" { // empty struct
			dst.BookmarkResponse = nil
		} else {
			return nil // data stored in dst.BookmarkResponse, return on the first match
		}
	} else {
		dst.BookmarkResponse = nil
	}

	// try to unmarshal JSON data into MessageModel
	err = json.Unmarshal(data, &dst.MessageModel);
	if err == nil {
		jsonMessageModel, _ := json.Marshal(dst.MessageModel)
		if string(jsonMessageModel) == "{}" { // empty struct
			dst.MessageModel = nil
		} else {
			return nil // data stored in dst.MessageModel, return on the first match
		}
	} else {
		dst.MessageModel = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(BookingBookmarkResponse)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *BookingBookmarkResponse) MarshalJSON() ([]byte, error) {
	if src.BookingBookmarkResponseExisted != nil {
		return json.Marshal(&src.BookingBookmarkResponseExisted)
	}

	if src.BookmarkResponse != nil {
		return json.Marshal(&src.BookmarkResponse)
	}

	if src.MessageModel != nil {
		return json.Marshal(&src.MessageModel)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableBookingBookmarkResponse struct {
	value *BookingBookmarkResponse
	isSet bool
}

func (v NullableBookingBookmarkResponse) Get() *BookingBookmarkResponse {
	return v.value
}

func (v *NullableBookingBookmarkResponse) Set(val *BookingBookmarkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBookingBookmarkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBookingBookmarkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookingBookmarkResponse(val *BookingBookmarkResponse) *NullableBookingBookmarkResponse {
	return &NullableBookingBookmarkResponse{value: val, isSet: true}
}

func (v NullableBookingBookmarkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookingBookmarkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


