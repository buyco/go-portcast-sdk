/*
Portcast API (1.1.0) - Bill of Lading Tracking

**This documentation is for the latest version of the Portcast Bill of Lading Tracking API.**  There are two variables used in this documentation: 1. `api-url`: the url to use for accessing the API. The official url is `https://api.portcast.io` 2. `x-api-key`: the access token to send along with every request to the API. This key will be provided to each organisation upon API access activation  The general workflow is as below:  1. Create the bill of lading bookmark if it does not exist already (`POST {{api-url}}/api/v1/eta/bill-of-lading-bookmarks`). 2. A bookmark must contain `carrier_no`, `bl_no` and `cntr_no` information. This will return the bill of lading bookmark information created. Record the `id` field from the response. 3. Wait for predictions to be generated. This could take up to 5 mins. 5. Query for the tracking results based on the `id` recorded earlier (`GET {{api-url}}/api/v1/eta/tracking/bill-of-lading-bookmarks/<id>`) 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
	"time"
)

// TrackingEventContainerEventList struct for TrackingEventContainerEventList
type TrackingEventContainerEventList struct {
	Created *string `json:"created,omitempty"`
	EventRaw *string `json:"event_raw,omitempty"`
	EventTime *string `json:"event_time,omitempty"`
	EventTimeEstimated *string `json:"event_time_estimated,omitempty"`
	EventTypeCode *string `json:"event_type_code,omitempty"`
	EventTypeName *string `json:"event_type_name,omitempty"`
	Id *string `json:"id,omitempty"`
	LocationRaw *string `json:"location_raw,omitempty"`
	LocationTypeCode *string `json:"location_type_code,omitempty"`
	LocationTypeName *string `json:"location_type_name,omitempty"`
	PortCode *string `json:"port_code,omitempty"`
	PortName *string `json:"port_name,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewTrackingEventContainerEventList instantiates a new TrackingEventContainerEventList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingEventContainerEventList() *TrackingEventContainerEventList {
	this := TrackingEventContainerEventList{}
	return &this
}

// NewTrackingEventContainerEventListWithDefaults instantiates a new TrackingEventContainerEventList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingEventContainerEventListWithDefaults() *TrackingEventContainerEventList {
	this := TrackingEventContainerEventList{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *TrackingEventContainerEventList) SetCreated(v string) {
	o.Created = &v
}

// GetEventRaw returns the EventRaw field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetEventRaw() string {
	if o == nil || o.EventRaw == nil {
		var ret string
		return ret
	}
	return *o.EventRaw
}

// GetEventRawOk returns a tuple with the EventRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetEventRawOk() (*string, bool) {
	if o == nil || o.EventRaw == nil {
		return nil, false
	}
	return o.EventRaw, true
}

// HasEventRaw returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasEventRaw() bool {
	if o != nil && o.EventRaw != nil {
		return true
	}

	return false
}

// SetEventRaw gets a reference to the given string and assigns it to the EventRaw field.
func (o *TrackingEventContainerEventList) SetEventRaw(v string) {
	o.EventRaw = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetEventTime() string {
	if o == nil || o.EventTime == nil {
		var ret string
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetEventTimeOk() (*string, bool) {
	if o == nil || o.EventTime == nil {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasEventTime() bool {
	if o != nil && o.EventTime != nil {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given string and assigns it to the EventTime field.
func (o *TrackingEventContainerEventList) SetEventTime(v string) {
	o.EventTime = &v
}

// GetEventTimeEstimated returns the EventTimeEstimated field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetEventTimeEstimated() string {
	if o == nil || o.EventTimeEstimated == nil {
		var ret string
		return ret
	}
	return *o.EventTimeEstimated
}

// GetEventTimeEstimatedOk returns a tuple with the EventTimeEstimated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetEventTimeEstimatedOk() (*string, bool) {
	if o == nil || o.EventTimeEstimated == nil {
		return nil, false
	}
	return o.EventTimeEstimated, true
}

// HasEventTimeEstimated returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasEventTimeEstimated() bool {
	if o != nil && o.EventTimeEstimated != nil {
		return true
	}

	return false
}

// SetEventTimeEstimated gets a reference to the given string and assigns it to the EventTimeEstimated field.
func (o *TrackingEventContainerEventList) SetEventTimeEstimated(v string) {
	o.EventTimeEstimated = &v
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetEventTypeCode() string {
	if o == nil || o.EventTypeCode == nil {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || o.EventTypeCode == nil {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasEventTypeCode() bool {
	if o != nil && o.EventTypeCode != nil {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
func (o *TrackingEventContainerEventList) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

// GetEventTypeName returns the EventTypeName field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetEventTypeName() string {
	if o == nil || o.EventTypeName == nil {
		var ret string
		return ret
	}
	return *o.EventTypeName
}

// GetEventTypeNameOk returns a tuple with the EventTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetEventTypeNameOk() (*string, bool) {
	if o == nil || o.EventTypeName == nil {
		return nil, false
	}
	return o.EventTypeName, true
}

// HasEventTypeName returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasEventTypeName() bool {
	if o != nil && o.EventTypeName != nil {
		return true
	}

	return false
}

// SetEventTypeName gets a reference to the given string and assigns it to the EventTypeName field.
func (o *TrackingEventContainerEventList) SetEventTypeName(v string) {
	o.EventTypeName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrackingEventContainerEventList) SetId(v string) {
	o.Id = &v
}

// GetLocationRaw returns the LocationRaw field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetLocationRaw() string {
	if o == nil || o.LocationRaw == nil {
		var ret string
		return ret
	}
	return *o.LocationRaw
}

// GetLocationRawOk returns a tuple with the LocationRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetLocationRawOk() (*string, bool) {
	if o == nil || o.LocationRaw == nil {
		return nil, false
	}
	return o.LocationRaw, true
}

// HasLocationRaw returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasLocationRaw() bool {
	if o != nil && o.LocationRaw != nil {
		return true
	}

	return false
}

// SetLocationRaw gets a reference to the given string and assigns it to the LocationRaw field.
func (o *TrackingEventContainerEventList) SetLocationRaw(v string) {
	o.LocationRaw = &v
}

// GetLocationTypeCode returns the LocationTypeCode field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetLocationTypeCode() string {
	if o == nil || o.LocationTypeCode == nil {
		var ret string
		return ret
	}
	return *o.LocationTypeCode
}

// GetLocationTypeCodeOk returns a tuple with the LocationTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetLocationTypeCodeOk() (*string, bool) {
	if o == nil || o.LocationTypeCode == nil {
		return nil, false
	}
	return o.LocationTypeCode, true
}

// HasLocationTypeCode returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasLocationTypeCode() bool {
	if o != nil && o.LocationTypeCode != nil {
		return true
	}

	return false
}

// SetLocationTypeCode gets a reference to the given string and assigns it to the LocationTypeCode field.
func (o *TrackingEventContainerEventList) SetLocationTypeCode(v string) {
	o.LocationTypeCode = &v
}

// GetLocationTypeName returns the LocationTypeName field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetLocationTypeName() string {
	if o == nil || o.LocationTypeName == nil {
		var ret string
		return ret
	}
	return *o.LocationTypeName
}

// GetLocationTypeNameOk returns a tuple with the LocationTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetLocationTypeNameOk() (*string, bool) {
	if o == nil || o.LocationTypeName == nil {
		return nil, false
	}
	return o.LocationTypeName, true
}

// HasLocationTypeName returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasLocationTypeName() bool {
	if o != nil && o.LocationTypeName != nil {
		return true
	}

	return false
}

// SetLocationTypeName gets a reference to the given string and assigns it to the LocationTypeName field.
func (o *TrackingEventContainerEventList) SetLocationTypeName(v string) {
	o.LocationTypeName = &v
}

// GetPortCode returns the PortCode field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetPortCode() string {
	if o == nil || o.PortCode == nil {
		var ret string
		return ret
	}
	return *o.PortCode
}

// GetPortCodeOk returns a tuple with the PortCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetPortCodeOk() (*string, bool) {
	if o == nil || o.PortCode == nil {
		return nil, false
	}
	return o.PortCode, true
}

// HasPortCode returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasPortCode() bool {
	if o != nil && o.PortCode != nil {
		return true
	}

	return false
}

// SetPortCode gets a reference to the given string and assigns it to the PortCode field.
func (o *TrackingEventContainerEventList) SetPortCode(v string) {
	o.PortCode = &v
}

// GetPortName returns the PortName field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetPortName() string {
	if o == nil || o.PortName == nil {
		var ret string
		return ret
	}
	return *o.PortName
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetPortNameOk() (*string, bool) {
	if o == nil || o.PortName == nil {
		return nil, false
	}
	return o.PortName, true
}

// HasPortName returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasPortName() bool {
	if o != nil && o.PortName != nil {
		return true
	}

	return false
}

// SetPortName gets a reference to the given string and assigns it to the PortName field.
func (o *TrackingEventContainerEventList) SetPortName(v string) {
	o.PortName = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *TrackingEventContainerEventList) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingEventContainerEventList) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *TrackingEventContainerEventList) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *TrackingEventContainerEventList) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o TrackingEventContainerEventList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.EventRaw != nil {
		toSerialize["event_raw"] = o.EventRaw
	}
	if o.EventTime != nil {
		toSerialize["event_time"] = o.EventTime
	}
	if o.EventTimeEstimated != nil {
		toSerialize["event_time_estimated"] = o.EventTimeEstimated
	}
	if o.EventTypeCode != nil {
		toSerialize["event_type_code"] = o.EventTypeCode
	}
	if o.EventTypeName != nil {
		toSerialize["event_type_name"] = o.EventTypeName
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LocationRaw != nil {
		toSerialize["location_raw"] = o.LocationRaw
	}
	if o.LocationTypeCode != nil {
		toSerialize["location_type_code"] = o.LocationTypeCode
	}
	if o.LocationTypeName != nil {
		toSerialize["location_type_name"] = o.LocationTypeName
	}
	if o.PortCode != nil {
		toSerialize["port_code"] = o.PortCode
	}
	if o.PortName != nil {
		toSerialize["port_name"] = o.PortName
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableTrackingEventContainerEventList struct {
	value *TrackingEventContainerEventList
	isSet bool
}

func (v NullableTrackingEventContainerEventList) Get() *TrackingEventContainerEventList {
	return v.value
}

func (v *NullableTrackingEventContainerEventList) Set(val *TrackingEventContainerEventList) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingEventContainerEventList) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingEventContainerEventList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingEventContainerEventList(val *TrackingEventContainerEventList) *NullableTrackingEventContainerEventList {
	return &NullableTrackingEventContainerEventList{value: val, isSet: true}
}

func (v NullableTrackingEventContainerEventList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingEventContainerEventList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


