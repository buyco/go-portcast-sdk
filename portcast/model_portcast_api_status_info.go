/*
Container Tracking API

This documentation defines how the users can utilize the Portcast API to retrieve the latest Track and Trace Data for any container, bill of lading or booking across 100+ carriers and 2500+ ports across the globe.  What's changed in the version 2.0? Find out more about it [here](https://support.portcast.io/support/solutions/articles/151000074289-api-release-notes-april-2023-)!!

API version: 2.0
Contact: support@portcast.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
	"fmt"
)

// PortcastAPIStatusInfo - Status Defination Object for the [API Response](docs/Portcast-Status-Codes.md)
type PortcastAPIStatusInfo struct {
	PortcastAPIStatusInfoOneOf *PortcastAPIStatusInfoOneOf
	PortcastAPIStatusInfoOneOf1 *PortcastAPIStatusInfoOneOf1
	PortcastAPIStatusInfoOneOf2 *PortcastAPIStatusInfoOneOf2
}

// PortcastAPIStatusInfoOneOfAsPortcastAPIStatusInfo is a convenience function that returns PortcastAPIStatusInfoOneOf wrapped in PortcastAPIStatusInfo
func PortcastAPIStatusInfoOneOfAsPortcastAPIStatusInfo(v *PortcastAPIStatusInfoOneOf) PortcastAPIStatusInfo {
	return PortcastAPIStatusInfo{
		PortcastAPIStatusInfoOneOf: v,
	}
}

// PortcastAPIStatusInfoOneOf1AsPortcastAPIStatusInfo is a convenience function that returns PortcastAPIStatusInfoOneOf1 wrapped in PortcastAPIStatusInfo
func PortcastAPIStatusInfoOneOf1AsPortcastAPIStatusInfo(v *PortcastAPIStatusInfoOneOf1) PortcastAPIStatusInfo {
	return PortcastAPIStatusInfo{
		PortcastAPIStatusInfoOneOf1: v,
	}
}

// PortcastAPIStatusInfoOneOf2AsPortcastAPIStatusInfo is a convenience function that returns PortcastAPIStatusInfoOneOf2 wrapped in PortcastAPIStatusInfo
func PortcastAPIStatusInfoOneOf2AsPortcastAPIStatusInfo(v *PortcastAPIStatusInfoOneOf2) PortcastAPIStatusInfo {
	return PortcastAPIStatusInfo{
		PortcastAPIStatusInfoOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PortcastAPIStatusInfo) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PortcastAPIStatusInfoOneOf
	err = newStrictDecoder(data).Decode(&dst.PortcastAPIStatusInfoOneOf)
	if err == nil {
		jsonPortcastAPIStatusInfoOneOf, _ := json.Marshal(dst.PortcastAPIStatusInfoOneOf)
		if string(jsonPortcastAPIStatusInfoOneOf) == "{}" { // empty struct
			dst.PortcastAPIStatusInfoOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PortcastAPIStatusInfoOneOf = nil
	}

	// try to unmarshal data into PortcastAPIStatusInfoOneOf1
	err = newStrictDecoder(data).Decode(&dst.PortcastAPIStatusInfoOneOf1)
	if err == nil {
		jsonPortcastAPIStatusInfoOneOf1, _ := json.Marshal(dst.PortcastAPIStatusInfoOneOf1)
		if string(jsonPortcastAPIStatusInfoOneOf1) == "{}" { // empty struct
			dst.PortcastAPIStatusInfoOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.PortcastAPIStatusInfoOneOf1 = nil
	}

	// try to unmarshal data into PortcastAPIStatusInfoOneOf2
	err = newStrictDecoder(data).Decode(&dst.PortcastAPIStatusInfoOneOf2)
	if err == nil {
		jsonPortcastAPIStatusInfoOneOf2, _ := json.Marshal(dst.PortcastAPIStatusInfoOneOf2)
		if string(jsonPortcastAPIStatusInfoOneOf2) == "{}" { // empty struct
			dst.PortcastAPIStatusInfoOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.PortcastAPIStatusInfoOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PortcastAPIStatusInfoOneOf = nil
		dst.PortcastAPIStatusInfoOneOf1 = nil
		dst.PortcastAPIStatusInfoOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PortcastAPIStatusInfo)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PortcastAPIStatusInfo)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PortcastAPIStatusInfo) MarshalJSON() ([]byte, error) {
	if src.PortcastAPIStatusInfoOneOf != nil {
		return json.Marshal(&src.PortcastAPIStatusInfoOneOf)
	}

	if src.PortcastAPIStatusInfoOneOf1 != nil {
		return json.Marshal(&src.PortcastAPIStatusInfoOneOf1)
	}

	if src.PortcastAPIStatusInfoOneOf2 != nil {
		return json.Marshal(&src.PortcastAPIStatusInfoOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PortcastAPIStatusInfo) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PortcastAPIStatusInfoOneOf != nil {
		return obj.PortcastAPIStatusInfoOneOf
	}

	if obj.PortcastAPIStatusInfoOneOf1 != nil {
		return obj.PortcastAPIStatusInfoOneOf1
	}

	if obj.PortcastAPIStatusInfoOneOf2 != nil {
		return obj.PortcastAPIStatusInfoOneOf2
	}

	// all schemas are nil
	return nil
}

type NullablePortcastAPIStatusInfo struct {
	value *PortcastAPIStatusInfo
	isSet bool
}

func (v NullablePortcastAPIStatusInfo) Get() *PortcastAPIStatusInfo {
	return v.value
}

func (v *NullablePortcastAPIStatusInfo) Set(val *PortcastAPIStatusInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePortcastAPIStatusInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePortcastAPIStatusInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortcastAPIStatusInfo(val *PortcastAPIStatusInfo) *NullablePortcastAPIStatusInfo {
	return &NullablePortcastAPIStatusInfo{value: val, isSet: true}
}

func (v NullablePortcastAPIStatusInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortcastAPIStatusInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


