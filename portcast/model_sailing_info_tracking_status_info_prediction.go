/*
Container Tracking API

This documentation defines how the users can utilize the Portcast API to retrieve the latest Track and Trace Data for any container, bill of lading or booking across 100+ carriers and 2500+ ports across the globe.  What's changed in the version 2.0? Find out more about it [here](https://support.portcast.io/support/solutions/articles/151000074289-api-release-notes-april-2023-)!!

API version: 2.0
Contact: support@portcast.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
	"fmt"
)

// SailingInfoTrackingStatusInfoPrediction - Status Defination related to the [Prediction Engine](docs/Portcast-Status-Codes.md)
type SailingInfoTrackingStatusInfoPrediction struct {
	SailingInfoTrackingStatusInfoPredictionOneOf  *SailingInfoTrackingStatusInfoPredictionOneOf
	SailingInfoTrackingStatusInfoPredictionOneOf1 *SailingInfoTrackingStatusInfoPredictionOneOf1
	SailingInfoTrackingStatusInfoPredictionOneOf2 *SailingInfoTrackingStatusInfoPredictionOneOf2
	SailingInfoTrackingStatusInfoPredictionOneOf3 *SailingInfoTrackingStatusInfoPredictionOneOf3
}

// SailingInfoTrackingStatusInfoPredictionOneOfAsSailingInfoTrackingStatusInfoPrediction is a convenience function that returns SailingInfoTrackingStatusInfoPredictionOneOf wrapped in SailingInfoTrackingStatusInfoPrediction
func SailingInfoTrackingStatusInfoPredictionOneOfAsSailingInfoTrackingStatusInfoPrediction(v *SailingInfoTrackingStatusInfoPredictionOneOf) SailingInfoTrackingStatusInfoPrediction {
	return SailingInfoTrackingStatusInfoPrediction{
		SailingInfoTrackingStatusInfoPredictionOneOf: v,
	}
}

// SailingInfoTrackingStatusInfoPredictionOneOf1AsSailingInfoTrackingStatusInfoPrediction is a convenience function that returns SailingInfoTrackingStatusInfoPredictionOneOf1 wrapped in SailingInfoTrackingStatusInfoPrediction
func SailingInfoTrackingStatusInfoPredictionOneOf1AsSailingInfoTrackingStatusInfoPrediction(v *SailingInfoTrackingStatusInfoPredictionOneOf1) SailingInfoTrackingStatusInfoPrediction {
	return SailingInfoTrackingStatusInfoPrediction{
		SailingInfoTrackingStatusInfoPredictionOneOf1: v,
	}
}

// SailingInfoTrackingStatusInfoPredictionOneOf2AsSailingInfoTrackingStatusInfoPrediction is a convenience function that returns SailingInfoTrackingStatusInfoPredictionOneOf2 wrapped in SailingInfoTrackingStatusInfoPrediction
func SailingInfoTrackingStatusInfoPredictionOneOf2AsSailingInfoTrackingStatusInfoPrediction(v *SailingInfoTrackingStatusInfoPredictionOneOf2) SailingInfoTrackingStatusInfoPrediction {
	return SailingInfoTrackingStatusInfoPrediction{
		SailingInfoTrackingStatusInfoPredictionOneOf2: v,
	}
}

// SailingInfoTrackingStatusInfoPredictionOneOf3AsSailingInfoTrackingStatusInfoPrediction is a convenience function that returns SailingInfoTrackingStatusInfoPredictionOneOf3 wrapped in SailingInfoTrackingStatusInfoPrediction
func SailingInfoTrackingStatusInfoPredictionOneOf3AsSailingInfoTrackingStatusInfoPrediction(v *SailingInfoTrackingStatusInfoPredictionOneOf3) SailingInfoTrackingStatusInfoPrediction {
	return SailingInfoTrackingStatusInfoPrediction{
		SailingInfoTrackingStatusInfoPredictionOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SailingInfoTrackingStatusInfoPrediction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SailingInfoTrackingStatusInfoPredictionOneOf
	err = newStrictDecoder(data).Decode(&dst.SailingInfoTrackingStatusInfoPredictionOneOf)
	if err == nil {
		jsonSailingInfoTrackingStatusInfoPredictionOneOf, _ := json.Marshal(dst.SailingInfoTrackingStatusInfoPredictionOneOf)
		if string(jsonSailingInfoTrackingStatusInfoPredictionOneOf) == "{}" { // empty struct
			dst.SailingInfoTrackingStatusInfoPredictionOneOf = nil
		} else {
			match++
		}
	} else {
		dst.SailingInfoTrackingStatusInfoPredictionOneOf = nil
	}

	// try to unmarshal data into SailingInfoTrackingStatusInfoPredictionOneOf1
	err = newStrictDecoder(data).Decode(&dst.SailingInfoTrackingStatusInfoPredictionOneOf1)
	if err == nil {
		jsonSailingInfoTrackingStatusInfoPredictionOneOf1, _ := json.Marshal(dst.SailingInfoTrackingStatusInfoPredictionOneOf1)
		if string(jsonSailingInfoTrackingStatusInfoPredictionOneOf1) == "{}" { // empty struct
			dst.SailingInfoTrackingStatusInfoPredictionOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.SailingInfoTrackingStatusInfoPredictionOneOf1 = nil
	}

	// try to unmarshal data into SailingInfoTrackingStatusInfoPredictionOneOf2
	err = newStrictDecoder(data).Decode(&dst.SailingInfoTrackingStatusInfoPredictionOneOf2)
	if err == nil {
		jsonSailingInfoTrackingStatusInfoPredictionOneOf2, _ := json.Marshal(dst.SailingInfoTrackingStatusInfoPredictionOneOf2)
		if string(jsonSailingInfoTrackingStatusInfoPredictionOneOf2) == "{}" { // empty struct
			dst.SailingInfoTrackingStatusInfoPredictionOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.SailingInfoTrackingStatusInfoPredictionOneOf2 = nil
	}

	// try to unmarshal data into SailingInfoTrackingStatusInfoPredictionOneOf3
	err = newStrictDecoder(data).Decode(&dst.SailingInfoTrackingStatusInfoPredictionOneOf3)
	if err == nil {
		jsonSailingInfoTrackingStatusInfoPredictionOneOf3, _ := json.Marshal(dst.SailingInfoTrackingStatusInfoPredictionOneOf3)
		if string(jsonSailingInfoTrackingStatusInfoPredictionOneOf3) == "{}" { // empty struct
			dst.SailingInfoTrackingStatusInfoPredictionOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.SailingInfoTrackingStatusInfoPredictionOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SailingInfoTrackingStatusInfoPredictionOneOf = nil
		dst.SailingInfoTrackingStatusInfoPredictionOneOf1 = nil
		dst.SailingInfoTrackingStatusInfoPredictionOneOf2 = nil
		dst.SailingInfoTrackingStatusInfoPredictionOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SailingInfoTrackingStatusInfoPrediction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SailingInfoTrackingStatusInfoPrediction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SailingInfoTrackingStatusInfoPrediction) MarshalJSON() ([]byte, error) {
	if src.SailingInfoTrackingStatusInfoPredictionOneOf != nil {
		return json.Marshal(&src.SailingInfoTrackingStatusInfoPredictionOneOf)
	}

	if src.SailingInfoTrackingStatusInfoPredictionOneOf1 != nil {
		return json.Marshal(&src.SailingInfoTrackingStatusInfoPredictionOneOf1)
	}

	if src.SailingInfoTrackingStatusInfoPredictionOneOf2 != nil {
		return json.Marshal(&src.SailingInfoTrackingStatusInfoPredictionOneOf2)
	}

	if src.SailingInfoTrackingStatusInfoPredictionOneOf3 != nil {
		return json.Marshal(&src.SailingInfoTrackingStatusInfoPredictionOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SailingInfoTrackingStatusInfoPrediction) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SailingInfoTrackingStatusInfoPredictionOneOf != nil {
		return obj.SailingInfoTrackingStatusInfoPredictionOneOf
	}

	if obj.SailingInfoTrackingStatusInfoPredictionOneOf1 != nil {
		return obj.SailingInfoTrackingStatusInfoPredictionOneOf1
	}

	if obj.SailingInfoTrackingStatusInfoPredictionOneOf2 != nil {
		return obj.SailingInfoTrackingStatusInfoPredictionOneOf2
	}

	if obj.SailingInfoTrackingStatusInfoPredictionOneOf3 != nil {
		return obj.SailingInfoTrackingStatusInfoPredictionOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableSailingInfoTrackingStatusInfoPrediction struct {
	value *SailingInfoTrackingStatusInfoPrediction
	isSet bool
}

func (v NullableSailingInfoTrackingStatusInfoPrediction) Get() *SailingInfoTrackingStatusInfoPrediction {
	return v.value
}

func (v *NullableSailingInfoTrackingStatusInfoPrediction) Set(val *SailingInfoTrackingStatusInfoPrediction) {
	v.value = val
	v.isSet = true
}

func (v NullableSailingInfoTrackingStatusInfoPrediction) IsSet() bool {
	return v.isSet
}

func (v *NullableSailingInfoTrackingStatusInfoPrediction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSailingInfoTrackingStatusInfoPrediction(val *SailingInfoTrackingStatusInfoPrediction) *NullableSailingInfoTrackingStatusInfoPrediction {
	return &NullableSailingInfoTrackingStatusInfoPrediction{value: val, isSet: true}
}

func (v NullableSailingInfoTrackingStatusInfoPrediction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSailingInfoTrackingStatusInfoPrediction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
