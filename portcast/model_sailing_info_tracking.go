/*
Container Tracking API

This documentation defines how the users can utilize the Portcast API to retrieve the latest Track and Trace Data for any container, bill of lading or booking across 100+ carriers and 2500+ ports across the globe.  What's changed in the version 2.0? Find out more about it [here](https://support.portcast.io/support/solutions/articles/151000074289-api-release-notes-april-2023-)!!

API version: 2.0
Contact: support@portcast.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
)

// checks if the SailingInfoTracking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SailingInfoTracking{}

// SailingInfoTracking Schema for Sailing Info Tracking
type SailingInfoTracking struct {
	Ais         *SailingInfoTrackingAis         `json:"ais,omitempty"`
	SailingInfo *SailingInfoTrackingSailingInfo `json:"sailing_info,omitempty"`
	StatusInfo  *SailingInfoTrackingStatusInfo  `json:"status_info,omitempty"`
	// Sailing Schedule for the vessel between the starting and target port of this specific leg of the journey
	VoyageDetails []VoyageDetails `json:"voyage_details,omitempty"`
	// Details on AIS Data fetch
	Msg *string `json:"msg,omitempty"`
	// Successfully Fetched AIS data or not
	Success *bool `json:"success,omitempty"`
}

// NewSailingInfoTracking instantiates a new SailingInfoTracking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSailingInfoTracking() *SailingInfoTracking {
	this := SailingInfoTracking{}
	var success bool = true
	this.Success = &success
	return &this
}

// NewSailingInfoTrackingWithDefaults instantiates a new SailingInfoTracking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSailingInfoTrackingWithDefaults() *SailingInfoTracking {
	this := SailingInfoTracking{}
	var success bool = true
	this.Success = &success
	return &this
}

// GetAis returns the Ais field value if set, zero value otherwise.
func (o *SailingInfoTracking) GetAis() SailingInfoTrackingAis {
	if o == nil || IsNil(o.Ais) {
		var ret SailingInfoTrackingAis
		return ret
	}
	return *o.Ais
}

// GetAisOk returns a tuple with the Ais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SailingInfoTracking) GetAisOk() (*SailingInfoTrackingAis, bool) {
	if o == nil || IsNil(o.Ais) {
		return nil, false
	}
	return o.Ais, true
}

// HasAis returns a boolean if a field has been set.
func (o *SailingInfoTracking) HasAis() bool {
	if o != nil && !IsNil(o.Ais) {
		return true
	}

	return false
}

// SetAis gets a reference to the given SailingInfoTrackingAis and assigns it to the Ais field.
func (o *SailingInfoTracking) SetAis(v SailingInfoTrackingAis) {
	o.Ais = &v
}

// GetSailingInfo returns the SailingInfo field value if set, zero value otherwise.
func (o *SailingInfoTracking) GetSailingInfo() SailingInfoTrackingSailingInfo {
	if o == nil || IsNil(o.SailingInfo) {
		var ret SailingInfoTrackingSailingInfo
		return ret
	}
	return *o.SailingInfo
}

// GetSailingInfoOk returns a tuple with the SailingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SailingInfoTracking) GetSailingInfoOk() (*SailingInfoTrackingSailingInfo, bool) {
	if o == nil || IsNil(o.SailingInfo) {
		return nil, false
	}
	return o.SailingInfo, true
}

// HasSailingInfo returns a boolean if a field has been set.
func (o *SailingInfoTracking) HasSailingInfo() bool {
	if o != nil && !IsNil(o.SailingInfo) {
		return true
	}

	return false
}

// SetSailingInfo gets a reference to the given SailingInfoTrackingSailingInfo and assigns it to the SailingInfo field.
func (o *SailingInfoTracking) SetSailingInfo(v SailingInfoTrackingSailingInfo) {
	o.SailingInfo = &v
}

// GetStatusInfo returns the StatusInfo field value if set, zero value otherwise.
func (o *SailingInfoTracking) GetStatusInfo() SailingInfoTrackingStatusInfo {
	if o == nil || IsNil(o.StatusInfo) {
		var ret SailingInfoTrackingStatusInfo
		return ret
	}
	return *o.StatusInfo
}

// GetStatusInfoOk returns a tuple with the StatusInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SailingInfoTracking) GetStatusInfoOk() (*SailingInfoTrackingStatusInfo, bool) {
	if o == nil || IsNil(o.StatusInfo) {
		return nil, false
	}
	return o.StatusInfo, true
}

// HasStatusInfo returns a boolean if a field has been set.
func (o *SailingInfoTracking) HasStatusInfo() bool {
	if o != nil && !IsNil(o.StatusInfo) {
		return true
	}

	return false
}

// SetStatusInfo gets a reference to the given SailingInfoTrackingStatusInfo and assigns it to the StatusInfo field.
func (o *SailingInfoTracking) SetStatusInfo(v SailingInfoTrackingStatusInfo) {
	o.StatusInfo = &v
}

// GetVoyageDetails returns the VoyageDetails field value if set, zero value otherwise.
func (o *SailingInfoTracking) GetVoyageDetails() []VoyageDetails {
	if o == nil || IsNil(o.VoyageDetails) {
		var ret []VoyageDetails
		return ret
	}
	return o.VoyageDetails
}

// GetVoyageDetailsOk returns a tuple with the VoyageDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SailingInfoTracking) GetVoyageDetailsOk() ([]VoyageDetails, bool) {
	if o == nil || IsNil(o.VoyageDetails) {
		return nil, false
	}
	return o.VoyageDetails, true
}

// HasVoyageDetails returns a boolean if a field has been set.
func (o *SailingInfoTracking) HasVoyageDetails() bool {
	if o != nil && !IsNil(o.VoyageDetails) {
		return true
	}

	return false
}

// SetVoyageDetails gets a reference to the given []VoyageDetails and assigns it to the VoyageDetails field.
func (o *SailingInfoTracking) SetVoyageDetails(v []VoyageDetails) {
	o.VoyageDetails = v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *SailingInfoTracking) GetMsg() string {
	if o == nil || IsNil(o.Msg) {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SailingInfoTracking) GetMsgOk() (*string, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *SailingInfoTracking) HasMsg() bool {
	if o != nil && !IsNil(o.Msg) {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *SailingInfoTracking) SetMsg(v string) {
	o.Msg = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *SailingInfoTracking) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SailingInfoTracking) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *SailingInfoTracking) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *SailingInfoTracking) SetSuccess(v bool) {
	o.Success = &v
}

func (o SailingInfoTracking) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SailingInfoTracking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ais) {
		toSerialize["ais"] = o.Ais
	}
	if !IsNil(o.SailingInfo) {
		toSerialize["sailing_info"] = o.SailingInfo
	}
	if !IsNil(o.StatusInfo) {
		toSerialize["status_info"] = o.StatusInfo
	}
	if !IsNil(o.VoyageDetails) {
		toSerialize["voyage_details"] = o.VoyageDetails
	}
	if !IsNil(o.Msg) {
		toSerialize["msg"] = o.Msg
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableSailingInfoTracking struct {
	value *SailingInfoTracking
	isSet bool
}

func (v NullableSailingInfoTracking) Get() *SailingInfoTracking {
	return v.value
}

func (v *NullableSailingInfoTracking) Set(val *SailingInfoTracking) {
	v.value = val
	v.isSet = true
}

func (v NullableSailingInfoTracking) IsSet() bool {
	return v.isSet
}

func (v *NullableSailingInfoTracking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSailingInfoTracking(val *SailingInfoTracking) *NullableSailingInfoTracking {
	return &NullableSailingInfoTracking{value: val, isSet: true}
}

func (v NullableSailingInfoTracking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSailingInfoTracking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
