/*
Booking API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
)

// InlineResponse403 struct for InlineResponse403
type InlineResponse403 struct {
	// Quota exceeded message.
	Message *string `json:"message,omitempty"`
}

// NewInlineResponse403 instantiates a new InlineResponse403 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse403() *InlineResponse403 {
	this := InlineResponse403{}
	return &this
}

// NewInlineResponse403WithDefaults instantiates a new InlineResponse403 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse403WithDefaults() *InlineResponse403 {
	this := InlineResponse403{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *InlineResponse403) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse403) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *InlineResponse403) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *InlineResponse403) SetMessage(v string) {
	o.Message = &v
}

func (o InlineResponse403) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse403 struct {
	value *InlineResponse403
	isSet bool
}

func (v NullableInlineResponse403) Get() *InlineResponse403 {
	return v.value
}

func (v *NullableInlineResponse403) Set(val *InlineResponse403) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse403) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse403) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse403(val *InlineResponse403) *NullableInlineResponse403 {
	return &NullableInlineResponse403{value: val, isSet: true}
}

func (v NullableInlineResponse403) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse403) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
