/*
Container Tracking API

This documentation defines how the users can utilize the Portcast API to retrieve the latest Track and Trace Data for any container, bill of lading or booking across 100+ carriers and 2500+ ports across the globe.  What's changed in the version 2.0? Find out more about it [here](https://support.portcast.io/support/solutions/articles/151000074289-api-release-notes-april-2023-)!!

API version: 2.0
Contact: support@portcast.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"encoding/json"
	"time"
)

// checks if the SailingInfoTrackingAis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SailingInfoTrackingAis{}

// SailingInfoTrackingAis AIS Data for the vessel at this leg of the journey
type SailingInfoTrackingAis struct {
	// Vessel Course
	Course NullableFloat32 `json:"course,omitempty"`
	// Vessel IMO
	Imo NullableString `json:"imo,omitempty"`
	// Vessel's Latitude Position
	Lat NullableFloat32 `json:"lat,omitempty"`
	// Vessel's Longitude Position
	Lon NullableFloat32 `json:"lon,omitempty"`
	// Vessel's Speed in knots
	SpeedNm NullableFloat32 `json:"speed_nm,omitempty"`
	// Vessel's AIS Navigational Status
	Status NullableInt32 `json:"status,omitempty"`
	// Timestamp for when the AIS Data was fetched
	TimestampUtc NullableTime `json:"timestamp_utc,omitempty"`
}

// NewSailingInfoTrackingAis instantiates a new SailingInfoTrackingAis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSailingInfoTrackingAis() *SailingInfoTrackingAis {
	this := SailingInfoTrackingAis{}
	return &this
}

// NewSailingInfoTrackingAisWithDefaults instantiates a new SailingInfoTrackingAis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSailingInfoTrackingAisWithDefaults() *SailingInfoTrackingAis {
	this := SailingInfoTrackingAis{}
	return &this
}

// GetCourse returns the Course field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SailingInfoTrackingAis) GetCourse() float32 {
	if o == nil || IsNil(o.Course.Get()) {
		var ret float32
		return ret
	}
	return *o.Course.Get()
}

// GetCourseOk returns a tuple with the Course field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SailingInfoTrackingAis) GetCourseOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Course.Get(), o.Course.IsSet()
}

// HasCourse returns a boolean if a field has been set.
func (o *SailingInfoTrackingAis) HasCourse() bool {
	if o != nil && o.Course.IsSet() {
		return true
	}

	return false
}

// SetCourse gets a reference to the given NullableFloat32 and assigns it to the Course field.
func (o *SailingInfoTrackingAis) SetCourse(v float32) {
	o.Course.Set(&v)
}

// SetCourseNil sets the value for Course to be an explicit nil
func (o *SailingInfoTrackingAis) SetCourseNil() {
	o.Course.Set(nil)
}

// UnsetCourse ensures that no value is present for Course, not even an explicit nil
func (o *SailingInfoTrackingAis) UnsetCourse() {
	o.Course.Unset()
}

// GetImo returns the Imo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SailingInfoTrackingAis) GetImo() string {
	if o == nil || IsNil(o.Imo.Get()) {
		var ret string
		return ret
	}
	return *o.Imo.Get()
}

// GetImoOk returns a tuple with the Imo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SailingInfoTrackingAis) GetImoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Imo.Get(), o.Imo.IsSet()
}

// HasImo returns a boolean if a field has been set.
func (o *SailingInfoTrackingAis) HasImo() bool {
	if o != nil && o.Imo.IsSet() {
		return true
	}

	return false
}

// SetImo gets a reference to the given NullableString and assigns it to the Imo field.
func (o *SailingInfoTrackingAis) SetImo(v string) {
	o.Imo.Set(&v)
}

// SetImoNil sets the value for Imo to be an explicit nil
func (o *SailingInfoTrackingAis) SetImoNil() {
	o.Imo.Set(nil)
}

// UnsetImo ensures that no value is present for Imo, not even an explicit nil
func (o *SailingInfoTrackingAis) UnsetImo() {
	o.Imo.Unset()
}

// GetLat returns the Lat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SailingInfoTrackingAis) GetLat() float32 {
	if o == nil || IsNil(o.Lat.Get()) {
		var ret float32
		return ret
	}
	return *o.Lat.Get()
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SailingInfoTrackingAis) GetLatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lat.Get(), o.Lat.IsSet()
}

// HasLat returns a boolean if a field has been set.
func (o *SailingInfoTrackingAis) HasLat() bool {
	if o != nil && o.Lat.IsSet() {
		return true
	}

	return false
}

// SetLat gets a reference to the given NullableFloat32 and assigns it to the Lat field.
func (o *SailingInfoTrackingAis) SetLat(v float32) {
	o.Lat.Set(&v)
}

// SetLatNil sets the value for Lat to be an explicit nil
func (o *SailingInfoTrackingAis) SetLatNil() {
	o.Lat.Set(nil)
}

// UnsetLat ensures that no value is present for Lat, not even an explicit nil
func (o *SailingInfoTrackingAis) UnsetLat() {
	o.Lat.Unset()
}

// GetLon returns the Lon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SailingInfoTrackingAis) GetLon() float32 {
	if o == nil || IsNil(o.Lon.Get()) {
		var ret float32
		return ret
	}
	return *o.Lon.Get()
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SailingInfoTrackingAis) GetLonOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lon.Get(), o.Lon.IsSet()
}

// HasLon returns a boolean if a field has been set.
func (o *SailingInfoTrackingAis) HasLon() bool {
	if o != nil && o.Lon.IsSet() {
		return true
	}

	return false
}

// SetLon gets a reference to the given NullableFloat32 and assigns it to the Lon field.
func (o *SailingInfoTrackingAis) SetLon(v float32) {
	o.Lon.Set(&v)
}

// SetLonNil sets the value for Lon to be an explicit nil
func (o *SailingInfoTrackingAis) SetLonNil() {
	o.Lon.Set(nil)
}

// UnsetLon ensures that no value is present for Lon, not even an explicit nil
func (o *SailingInfoTrackingAis) UnsetLon() {
	o.Lon.Unset()
}

// GetSpeedNm returns the SpeedNm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SailingInfoTrackingAis) GetSpeedNm() float32 {
	if o == nil || IsNil(o.SpeedNm.Get()) {
		var ret float32
		return ret
	}
	return *o.SpeedNm.Get()
}

// GetSpeedNmOk returns a tuple with the SpeedNm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SailingInfoTrackingAis) GetSpeedNmOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpeedNm.Get(), o.SpeedNm.IsSet()
}

// HasSpeedNm returns a boolean if a field has been set.
func (o *SailingInfoTrackingAis) HasSpeedNm() bool {
	if o != nil && o.SpeedNm.IsSet() {
		return true
	}

	return false
}

// SetSpeedNm gets a reference to the given NullableFloat32 and assigns it to the SpeedNm field.
func (o *SailingInfoTrackingAis) SetSpeedNm(v float32) {
	o.SpeedNm.Set(&v)
}

// SetSpeedNmNil sets the value for SpeedNm to be an explicit nil
func (o *SailingInfoTrackingAis) SetSpeedNmNil() {
	o.SpeedNm.Set(nil)
}

// UnsetSpeedNm ensures that no value is present for SpeedNm, not even an explicit nil
func (o *SailingInfoTrackingAis) UnsetSpeedNm() {
	o.SpeedNm.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SailingInfoTrackingAis) GetStatus() int32 {
	if o == nil || IsNil(o.Status.Get()) {
		var ret int32
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SailingInfoTrackingAis) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *SailingInfoTrackingAis) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableInt32 and assigns it to the Status field.
func (o *SailingInfoTrackingAis) SetStatus(v int32) {
	o.Status.Set(&v)
}

// SetStatusNil sets the value for Status to be an explicit nil
func (o *SailingInfoTrackingAis) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *SailingInfoTrackingAis) UnsetStatus() {
	o.Status.Unset()
}

// GetTimestampUtc returns the TimestampUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SailingInfoTrackingAis) GetTimestampUtc() time.Time {
	if o == nil || IsNil(o.TimestampUtc.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TimestampUtc.Get()
}

// GetTimestampUtcOk returns a tuple with the TimestampUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SailingInfoTrackingAis) GetTimestampUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimestampUtc.Get(), o.TimestampUtc.IsSet()
}

// HasTimestampUtc returns a boolean if a field has been set.
func (o *SailingInfoTrackingAis) HasTimestampUtc() bool {
	if o != nil && o.TimestampUtc.IsSet() {
		return true
	}

	return false
}

// SetTimestampUtc gets a reference to the given NullableTime and assigns it to the TimestampUtc field.
func (o *SailingInfoTrackingAis) SetTimestampUtc(v time.Time) {
	o.TimestampUtc.Set(&v)
}

// SetTimestampUtcNil sets the value for TimestampUtc to be an explicit nil
func (o *SailingInfoTrackingAis) SetTimestampUtcNil() {
	o.TimestampUtc.Set(nil)
}

// UnsetTimestampUtc ensures that no value is present for TimestampUtc, not even an explicit nil
func (o *SailingInfoTrackingAis) UnsetTimestampUtc() {
	o.TimestampUtc.Unset()
}

func (o SailingInfoTrackingAis) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SailingInfoTrackingAis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Course.IsSet() {
		toSerialize["course"] = o.Course.Get()
	}
	if o.Imo.IsSet() {
		toSerialize["imo"] = o.Imo.Get()
	}
	if o.Lat.IsSet() {
		toSerialize["lat"] = o.Lat.Get()
	}
	if o.Lon.IsSet() {
		toSerialize["lon"] = o.Lon.Get()
	}
	if o.SpeedNm.IsSet() {
		toSerialize["speed_nm"] = o.SpeedNm.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.TimestampUtc.IsSet() {
		toSerialize["timestamp_utc"] = o.TimestampUtc.Get()
	}
	return toSerialize, nil
}

type NullableSailingInfoTrackingAis struct {
	value *SailingInfoTrackingAis
	isSet bool
}

func (v NullableSailingInfoTrackingAis) Get() *SailingInfoTrackingAis {
	return v.value
}

func (v *NullableSailingInfoTrackingAis) Set(val *SailingInfoTrackingAis) {
	v.value = val
	v.isSet = true
}

func (v NullableSailingInfoTrackingAis) IsSet() bool {
	return v.isSet
}

func (v *NullableSailingInfoTrackingAis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSailingInfoTrackingAis(val *SailingInfoTrackingAis) *NullableSailingInfoTrackingAis {
	return &NullableSailingInfoTrackingAis{value: val, isSet: true}
}

func (v NullableSailingInfoTrackingAis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSailingInfoTrackingAis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
