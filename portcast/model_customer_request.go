/*
Container Tracking API

This documentation defines how the users can utilize the Portcast API to retrieve the latest Track and Trace Data for any container, bill of lading or booking across 100+ carriers and 2500+ ports across the globe.  What's changed in the version 2.0? Find out more about it [here](https://support.portcast.io/support/solutions/articles/151000074289-api-release-notes-april-2023-)!!

API version: 2.0
Contact: support@portcast.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package portcast

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CustomerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerRequest{}

// CustomerRequest struct for CustomerRequest
type CustomerRequest struct {
	Customer string `json:"customer"`
}

type _CustomerRequest CustomerRequest

// NewCustomerRequest instantiates a new CustomerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerRequest(customer string) *CustomerRequest {
	this := CustomerRequest{}
	this.Customer = customer
	return &this
}

// NewCustomerRequestWithDefaults instantiates a new CustomerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerRequestWithDefaults() *CustomerRequest {
	this := CustomerRequest{}
	return &this
}

// GetCustomer returns the Customer field value
func (o *CustomerRequest) GetCustomer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value
// and a boolean to check if the value has been set.
func (o *CustomerRequest) GetCustomerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customer, true
}

// SetCustomer sets field value
func (o *CustomerRequest) SetCustomer(v string) {
	o.Customer = v
}

func (o CustomerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer"] = o.Customer
	return toSerialize, nil
}

func (o *CustomerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerRequest := _CustomerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerRequest)

	if err != nil {
		return err
	}

	*o = CustomerRequest(varCustomerRequest)

	return err
}

type NullableCustomerRequest struct {
	value *CustomerRequest
	isSet bool
}

func (v NullableCustomerRequest) Get() *CustomerRequest {
	return v.value
}

func (v *NullableCustomerRequest) Set(val *CustomerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerRequest(val *CustomerRequest) *NullableCustomerRequest {
	return &NullableCustomerRequest{value: val, isSet: true}
}

func (v NullableCustomerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
